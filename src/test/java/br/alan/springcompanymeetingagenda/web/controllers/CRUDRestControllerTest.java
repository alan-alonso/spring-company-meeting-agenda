package br.alan.springcompanymeetingagenda.web.controllers;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.hamcrest.core.Is;
import org.mockito.Mockito;
import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import br.alan.springcompanymeetingagenda.domain.BaseEntity;
import br.alan.springcompanymeetingagenda.services.CRUDService;
import lombok.Setter;

/**
 * CRUDRestControllerTest
 */
@Setter
@SuppressWarnings({"deprecation"})
public abstract class CRUDRestControllerTest<E extends BaseEntity> {

    // == fields ==
    String apiEndPointPath;

    MockMvc mockMvc;

    ObjectMapper objectMapper;

    // service mock
    private CRUDService<E> service;

    /**
     * {@link CRUDRestController#listAll()} test method.
     * 
     * @param pagedObject expected return object. Assumes it's not empty.
     * @throws Exception {@link MockMvc#perform()}
     */
    protected void listAllTest(Page<E> pagedObject) throws Exception {
        // arrange
        when(this.service.listAll(any(Pageable.class))).thenReturn(pagedObject);

        // act / assert
        this.mockMvc.perform(get(this.apiEndPointPath)).andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(jsonPath("$.content.length()", Is.is(1)))
                .andExpect(jsonPath("$.content[0].id",
                        Is.is(pagedObject.getContent().get(0).getId().intValue())));
        verify(this.service).listAll(any(Pageable.class));
    }


    /**
     * {@link CRUDRestController#getById()} test method.
     * 
     * @param returnObject expected return object. Assumes it's not null..
     * @throws Exception         {@link MockMvc#perform()}
     * @throws NotFoundException {@link CRUDService#getById()}
     */
    protected void getByIdTest(E returnObject) throws Exception, NotFoundException {
        // arrange
        when(this.service.getById(anyLong())).thenReturn(returnObject);

        // act / assert
        this.mockMvc.perform(get(this.apiEndPointPath + "/{id}", returnObject.getId()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(jsonPath("$.id", Is.is(returnObject.getId().intValue())));
        verify(service).getById(anyLong());
    }

    /**
     * {@link CRUDRestController#getById()} test method should result in a
     * {@link org.springframework.data.crossstore.NotFoundException} as input ID doesn't exist. The
     * end result is should be a response generated by an
     * {@link org.springframework.web.bind.annotation.ExceptionHandler} method.
     * 
     * @param returnObject expected return object. Assumes it's not null.
     * @throws Exception {@link MockMvc#perform()}
     */
    protected void getByIdShouldThrow(E returnObject) throws Exception {
        // arrange
        when(this.service.getById(anyLong())).thenThrow(new NotFoundException());

        // act / assert
        this.mockMvc.perform(get(this.apiEndPointPath + "/{id}", returnObject.getId()))
                .andExpect(status().isNotFound())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE));
        verify(this.service).getById(anyLong());
    }

    /**
     * {@link CRUDRestController#create()} test method.
     * 
     * @param returnObject expected return object. Assumes it's not null.
     * @throws Exception               {@link MockMvc#perform()}
     * @throws JsonProcessingException {@link com.fasterxml.jackson.databind.ObjectMapper#writeValueAsString()}
     */
    protected void createTest(E returnObject) throws JsonProcessingException, Exception {
        // arrange
        when(this.service.create(any())).thenReturn(returnObject);

        // act / assert
        this.mockMvc
                .perform(post(this.apiEndPointPath).contentType(MediaType.APPLICATION_JSON_VALUE)
                        .content(objectMapper.writeValueAsString(returnObject)))
                .andExpect(status().isCreated()).andExpect(header().string("Location",
                        this.apiEndPointPath + '/' + returnObject.getId()));
        verify(this.service).create(any());
    }

    /**
     * {@link CRUDRestController#update()} test method.
     * 
     * @param returnObject expected return object. Assumes it's not null.
     * @throws JsonProcessingException {@link com.fasterxml.jackson.databind.ObjectMapper#writeValueAsString()}
     * @throws Exception               {@link MockMvc#perform()}
     */
    protected void updateTest(E returnObject) throws JsonProcessingException, Exception {
        // arrange
        when(this.service.update(anyLong(), any())).thenReturn(returnObject);

        // act / assert
        this.mockMvc
                .perform(put(this.apiEndPointPath + "/{id}", returnObject.getId())
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .content(this.objectMapper.writeValueAsString(returnObject)))
                .andExpect(status().isNoContent());
        verify(this.service).update(anyLong(), any());
    }


    /**
     * {@link CRUDRestController#update()} test method should result in a
     * {@link org.springframework.data.crossstore.NotFoundException} as input ID doesn't exist. The
     * end result is should be a response generated by an
     * {@link org.springframework.web.bind.annotation.ExceptionHandler} method.
     * 
     * @param returnObject expected return object. Assumes it's not null.
     * @throws JsonProcessingException {@link com.fasterxml.jackson.databind.ObjectMapper#writeValueAsString()}
     * @throws Exception               {@link MockMvc#perform()}
     */
    protected void updateShouldThrow(E returnObject) throws JsonProcessingException, Exception {// arrange
        when(this.service.update(anyLong(), any())).thenThrow(new NotFoundException());

        // act / assert
        this.mockMvc
                .perform(put(this.apiEndPointPath + "/{id}", returnObject.getId())
                        .contentType(MediaType.APPLICATION_JSON_UTF8)
                        .content(this.objectMapper.writeValueAsString(returnObject)))
                .andExpect(status().isNotFound())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE));
        verify(this.service).update(anyLong(), any());
    }

    /**
     * {@link CRUDRestController#delete()} test method.
     * 
     * @throws Exception {@link MockMvc#perform()}
     */
    protected void deleteTest() throws Exception {
        // arrange
        Mockito.doNothing().when(this.service).delete(anyLong());

        // act / assert
        this.mockMvc.perform(delete(this.apiEndPointPath + "/{id}", 1L))
                .andExpect(status().isNoContent());
        verify(this.service).delete(anyLong());
    }

    /**
     * {@link CRUDRestController#delete()} test method should result in a
     * {@link org.springframework.data.crossstore.NotFoundException} as input ID doesn't exist. The
     * end result is should be a response generated by an
     * {@link org.springframework.web.bind.annotation.ExceptionHandler} method.
     * 
     * @throws Exception {@link MockMvc#perform()}
     */
    protected void deleteShouldThrow() throws Exception {
        // arrange
        Mockito.doThrow(new NotFoundException()).when(this.service).delete(anyLong());

        // act / assert
        this.mockMvc.perform(delete(this.apiEndPointPath + "/{id}", 1L))
                .andExpect(status().isNotFound())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE));
        verify(this.service).delete(anyLong());
    }
}
